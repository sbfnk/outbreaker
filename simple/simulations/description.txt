
==========================
SUMMARY OF THE SIMULATIONS
==========================

Simulations are made by varying different parameters from a base simulation.
In each case (base simulation and variations, 50 replicates are obtained).

-------------------
Base simulation is:
-------------------
- R = 1.5
- w generated by gamma (2, 0.7, 10) (in this order: mu, sigma, max.k)
- mu1=0.8e-4 mu2: 0.2e-4 (gamma always fixed to 1/4, genome length always fixed to 10,000)
- rate of imported cases = 0.05 (diverg imported cases always fixed to 20 (10x2) generations from index case)
- % sampled cases = 100%
- % sequenced data = 100%

Base simulations are stored in the directory 'base/'.


-----------------------
Variations of base are:
-----------------------
Values taken by parameters in different variations are:
- R: 1.1, 4
- w generated by gamma with param: (6, 3, 20), (1.5, 1, 10)
- mu1 = 0, 2e-4
- rate of imported cases: 0, 0.2
- % sampled cases: 25%, 50%, 75%
- % sequenced data: 25%, 50%, 75%

Variation simulations are stored in the directories indicating: the type of varied parameter (R, w,
mu1, imp, samp, seq (see right above) followed by "-[value]"; therefore, directories will be:
R-1.1, R-4, w-_, w-_, mu1-0, mu1-0.2, imp-0, imp-0.2, samp_25, samp_50, samp_75, seq_25, seq_50, seq_75.


-----------------------
outbreaker is run with:
-----------------------
All results will be based on a single run of outbreaker (not the parallel version) with the
following arguments:

init.tree="star", init.kappa=NULL, n.iter=1e5, sample.every=500, tune.every=500,burnin=2e4,
find.import=TRUE, find.import.n=50,pi.param1=1, pi.param2=1,init.mu1=1e-5, init.gamma=1,
move.mut=TRUE, move.ances=TRUE, move.kappa=TRUE





=========================
OUTPUTS OF ONE SIMULATION
=========================
Each simulation produces its own output (a dataset and its analysis), including:

1) [name-of-simulation].RData: a RData containing:
- full: the full outbreak
- dat: the analysed data
- collecDates: the collection dates
- res: results of outbreaker
- chains: the chains (res$chains) without the burnin
- tre: the consensus tree with a burnin of 2e4
- stat: a list of statistics
- key: the 10-characters hash key

'stat' is a data.frame containing the following information (with a single line):
- n: size of the analysed outbreak
- prop.ances.ok: the proportion of correct ancestries in the consensus tree
- msup.ances: the mean support (frequency) of the true ancestor in the posterior
- msup.kappa: the mean support (frequency) of the true kappa in the posterior
- merr.date: the mean error (in days, absolute numbers) in the dates of infection of the posterior
- prop.imp.ok: the proportion of successfully detected imported cases
- mu1.ok: 1 if true value of mu1 is in the 95% CI, 0 otherwise
- mu2.ok: 1 if true value of mu2 is in the 95% CI, 0 otherwise
- merr.pi: the mean error in posterior values of pi
- time: the time taken by the analysis by outbreaker, in (rounded) seconds

2) [name-of-simulation].in.txt: an in file indicating the parameters of the simulation, as a table
with one single row and the following columns:
- R: the R0
- w.mu: the mean used to generate w
- w.sigma: the standard deviation used to generate w
- mu1: rate of transitions
- mu2: rate of transversions
- r.imp.cases: rate of imported cases
- p.obs.cases: the proportion of sampled (observed) cases
- p.seq.data: the proportion of observed cases with genetic sequences

3) [name-of-simulation].out.txt: an output file based on 'stat', as a table with one single row and the
column named after 'stat'.


The name of the simulation ([name-of-simulation]) is coded as 10-characters hash key (SHA-1) based
on the data ('dat').





==========================
OUTPUTS OF ALL SIMULATIONS
==========================
The script 'poolResults' (in poolResults.R) scans all sub-directory looking for '[...].in.txt' and
'[...].out.txt' files, and compile these into a single data.frame. This data.frame is similar to a
cbind of '[...].in.txt' and '[...].out.txt'.

The script returns the pooled data.frame and writes its content to a file 'pooledResults.csv'. The
rows of the data.frame are the 10-characters hash keys.





=======================
HOW SIMULATIONS ARE RUN
=======================

A single script 'makeSimul.R' (possibly with a version number) is used to perform a set of
simulations, that is, generate the data, run outbreaker, derive results, and write relevant
information to files. The script itself is not parallelized, so that multiple simultaneous
executions can be made (easy to adapt to a cluster).

'makeSimul' takes two argumentsL
- 'N', the number of replicates to run, defaulting to 1.
- 'type', a character string indicating the type of simulation, coded as the name of directories
('base', 'R-1.1', 'R-4', ...). This is by default taken from the root directory, so that the script
run at the right place should do the right thing.



